from os import listdir
from PIL import Image
import os.path
import numpy as np
import math

path = 'C:\Exe files'

h = 256 #height of image
w = 256 #width of image

#be careful with using this function, it will consume memory, access to disk and time
images = []
for f in os.listdir(path):
  with open(os.path.join(path, f), 'rb') as img_set:
      img_arr = img_set.read(h*w)
      # img_arr = img_set.read(6225920)
      # l= len(img_arr)
      # new_arr = img_arr[:l]
      # h = int(math.sqrt(l)+1) #height of image
      # w = h #width of image
      
      img_array = img_set.read(h*w)
      while img_arr:
          if len(img_arr) == h*w and img_arr not in images:
              images.append(img_arr)
          img_arr = img_set.read(h*w)



#And you can save them into png files
count = 0
for img in images:
    png = Image.fromarray(np.reshape(list(img), (256,256)).astype('float32'), mode='L')
    # png = Image.fromarray((img))
    png.save('C:\Grayscale\image_l%d.png'%count)
    count += 1
    # png.show()




import numpy as np
from tensorflow.keras.utils import img_to_array
from keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.models import Sequential
import cv2
import matplotlib.pyplot as plt

np.random.seed(42)

img_size=256

img_data=[]

counts = 0
import os
from os import listdir
 
# get the path/directory
folder_dir = "C:\Grayscale"
filepaths  = [os.path.join(folder_dir, name) for name in os.listdir(folder_dir)]
for path in filepaths:
    img=cv2.imread(path, 1)
    gray_img=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    gary_img=cv2.resize(gray_img, (256,256))
    img_data.append(img_to_array(gray_img))
    img_final=np.reshape(img_data, (len(img_data),256, 256, 3))
    img_final=img_final.astype('float32')/255
    
    
    model=Sequential()
    model.add(Conv2D(64, (3,3), activation='relu', padding='same', input_shape=(256,256,3)))
    model.add(MaxPooling2D((2,2), padding='same'))
    model.add(Conv2D(32, (3,3),activation='relu',padding='same'))
    model.add(MaxPooling2D((2,2), padding='same'))
    model.add(Conv2D(16, (3,3),activation='relu',padding='same'))
    model.add(MaxPooling2D((2,2), padding='same'))
    
    model.add(Conv2D(16, (3,3), activation='relu', padding='same'))
    model.add(UpSampling2D((2,2)))
    
    model.add(Conv2D(32, (3,3), activation='relu', padding='same'))
    model.add(UpSampling2D((2,2)))
    
    model.add(Conv2D(64, (3,3), activation='relu', padding='same'))
    model.add(UpSampling2D((2,2)))
    
    model.add(Conv2D(3, (3,3), activation='relu', padding='same'))
    
    model.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])
    
    model.summary()
    
    model.fit(img_final, img_final, epochs=1, shuffle=True)
    
    pred=model.predict(img_final)
    
    
    plt.imshow(pred[0].reshape(256,256,3))
    plt.savefig('C:\Autoencoded Image\image_l%d.png'%counts)
    counts+=1
